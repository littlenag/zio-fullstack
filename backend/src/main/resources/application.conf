ziofullstack {
  env = ""

  http {
    baseUrl = "http://"${ziofullstack.http.host}":"${ziofullstack.http.port}
    baseUrl = ${?BASE_USER_CONSOLE_URL}
    host = "0.0.0.0"
    port = 8080
    logRequests = false
    logResponses = false
  }

  // Services are things this application provides
  //services {}

  // Infrastructure is what this application requires
  infrastructure {
    aws {
      creds-provider = env

      accessKey = "undefined"
      accessKey = ${?AWS_ACCESS_KEY}

      secretKey = "undefined"
      secretKey = ${?AWS_SECRET_KEY}

      region = us-west-2
    }

    smtp {
      host     = email-smtp.${ziofullstack.infrastructure.aws.region}.amazonaws.com
      port     = 25
      user     = ""
      user     = ${?SMTP_USERNAME}
      password = ""
      password = ${?SMTP_PASSWORD}
      mock     = false
      startTls = false
    }

    db {
      profile = "slick.jdbc.PostgresProfile$"
      db {
        dataSourceClass = "slick.jdbc.DriverDataSource"
        properties = {
          driver = "org.postgresql.Driver"
          url = "jdbc:postgresql://localhost:5432/ziofullstack"
          url = ${?DB_URL}
          user = ""
          user = ${?DB_USERNAME}
          password = ""
          password = ${?DB_PASSWORD}
        }

        // The number of threads determines how many things you can *run* in parallel
        // the number of connections determines you many things you can *keep in memory* at the same time
        // on the database server.
        // numThreads = (core_count (hyperthreading included))
        numThreads = 4
        #maxThreads = 4

        // queueSize = ((core_count * 2) + effective_spindle_count)
        // on a MBP 13, this is 2 cores * 2 (hyperthreading not included) + 1 hard disk
        queueSize = 5

        // https://github.com/dnvriend/akka-persistence-jdbc/issues/177
        // maxThreads == minThreads == maxConnections
        #maxConnections = 4

        connectionTimeout = 5000
        validationTimeout = 5000
      }
    }
  }
}